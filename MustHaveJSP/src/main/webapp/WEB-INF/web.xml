<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>MustHaveJSP</display-name>
  <!-- 
  	웹 컴파일리스트 : 웹 애플리케이션을 실행했을 때 파일명을 지정하지 않는경우
  		하위에 기술한 파일을 찾아 자동으로 실행한다. 만약 해당 파일이 없다면
  		404에러가 발생한다.
   -->
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>
  <!-- 
  	해당 프로젝트(웹 애플리케이션) 전체에서 사용할 수 있는 컨텍스트 초기화
  	파라미터(매개변수)로 일종의 상수값이라 생각하면 된다.
  	필요한 경우 application 내장객체를 통해 값을 읽을 수 있다.
  -->
  <context-param>
  	<param-name>INIT_PARAM</param-name><!-- INIT_PARAM을 설정하지 않으면 null을 반환 -->
  	<param-value>web.xml에 저장한 초기화 매개변수</param-value>
  </context-param>
  <!-- 
	오라클 접속정보를 컨텍스트 초기화 파라미터로 설정함
	해당 정보는 application 내장객체를 통해 값을 읽을 수 있다.
   -->
  <context-param>
  	<param-name>OracleDriver</param-name> <!-- 드라이버 이름 -->
  	<param-value>oracle.jdbc.OracleDriver</param-value>
  </context-param>
  <context-param>
  	<param-name>OracleURL</param-name> <!-- 접속 URL -->
  	<param-value>jdbc:oracle:thin:@localhost:1521:xe</param-value>
  </context-param>
  <context-param>
  	<param-name>OracleId</param-name>	<!-- 계정 ID -->
  	<param-value>musthave</param-value>
  </context-param>
  <context-param>
  	<param-name>OraclePwd</param-name>	<!-- 패스워드 -->
  	<param-value>1234</param-value>
  </context-param>
  <!-- 
  	웹 애플리케이션에서 예외(에러) 발생시 처리할 페이지를 지정한다.
  	404 : Not found. 페이지를 찾을 수 없을 때 발생
  	405 : Method not allowed. get / post 방식으로 전송시 해당 요청을
  		처리할 메서드가 없을 때 발생
  	500 : Internal server error. 서버 내부 오류로 오타가 있거나 로직에
  		문제가 있어 웹서버가 요청을 처리할 수 없을 때 발생
  	
  	* 에러페이지 처리는 실 서비스에서는 반드시 필요한 부분이지만 개발시에는
  	에러를 확인한 후 디버깅하면서 진행해야 하므로 개발이 완료될 때 까지는
  	주석으로 처리해 두는것이 좋다.  
   -->
<!--    <error-page> -->
<!--    		<error-code>404</error-code> -->
<!--    		<location>/02ImplicitObject/Exception.jsp</location> -->
<!--    </error-page> -->
<!--    <error-page> -->
<!--    		<error-code>405</error-code> -->
<!--    		<location>/02ImplicitObject/Exception.jsp</location> -->
<!--    </error-page> -->
<!--    <error-page> -->
<!--    		<error-code>500</error-code> -->
<!--    		<location>/02ImplicitObject/Exception.jsp</location> -->
<!--    </error-page> -->

	<!-- 세션 유지시간 설정 : web.xml에서는 분단위로 들어간다. -->
	<session-config>
	   <session-timeout>20</session-timeout>
	</session-config>
	<!-- 
		한글깨짐에 대한 필터 설정 : 현재 개발중인 웹 애플리케이션 전체에
			해당 필터를 적용한다. 웹 애플리케이션으로 들어오는 모든 요청에
			대해 문자 인코딩을 UTF-8로 하겠다는 필터 설정이다.
	 -->
<filter>
   <filter-name>SetCharEncoding</filter-name>
   <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
     <init-param>
       <param-name>encoding</param-name>
       <param-value>utf-8</param-value>
     </init-param>
</filter>
  <filter-mapping>
    <filter-name>SetCharEncoding</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- 게시판 페이징 처리를 위한 파라미터 추가 -->
  <!-- 한 페이지에 출력할 게시물의 갯수 설정 : 10개씩 -->
  <context-param>
  	<param-name>POSTS_PER_PAGE</param-name>
  	<param-value>10</param-value>
  </context-param>
  <!-- 한 블럭당 출력할 페이지번호의 갯수 설정 : 5페이지씩 출력 -->
  <context-param>
  	<param-name>PAGES_PER_BLOCK</param-name>
  	<param-value>5</param-value>
  </context-param>
  
  <!-- 서블릿 핑 -->
  <!-- 
  	웹 애플리케이션으로 요청이 들어올 때 url-pattern에 지정되었는지
  	확인하여 일치하면 해당 요청을 servlet-class에 지정된 servlet
  	클래스로 전달한다. 이때 servlet-name에 지정한 이름을 통해 요청명과
  	servlet을 매핑한다. 즉 특정한 요청이 있을때 해당 요청을 전달하기 위한
  	servlet class를 설정하는 것을 매핑이라 한다.
   -->
  <servlet>
  	<servlet-name>HelloServlet</servlet-name>
  	<servlet-class>servlet.HelloServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>HelloServlet</servlet-name>
  	<url-pattern>/13Servlet/HelloServlet.do</url-pattern>
  </servlet-mapping>
  <!-- 
  	요쳥명은 컨텍스트루트를 제외한 슬래시로 시작하는 경로명으로 설정
  	해야한다. 만약 슬래시로 시작하지 않으면 url-pattern을 인식하지
  	못해 톰캣이 구동되지 않는다.
   -->
  
  <!-- 서블릿에서 즉시 요즉시 요청에 대한 결과를 출력한다. -->
  <servlet>
  	<servlet-name>DirectServletPrint</servlet-name>
  	<servlet-class>servlet.DirectServletPrint</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>DirectServletPrint</servlet-name>
  	<url-pattern>/13Servlet/DirectServletPrint.do</url-pattern>
  </servlet-mapping>
  <!-- 회원인증을 위한 서블릿 매핑 -->
  <servlet>
  	<servlet-name>MemberAuth</servlet-name>
  	<servlet-class>servlet.MemberAuth</servlet-class>
  	<!-- 
  		해당 서블릿 내에서만 사용할 수 있는 초기화 파라미터 
  		context-param 으로 정의하는 컨텍스트 초기화 파라미터의 경우
  		웹 애플리케이션 전체에서 사용할 수 있는 전역상수라면, 해당
  		파라미터는 지역상수라고 할 수 있다.
  	 -->
  	<init-param>
  		<param-name>admin_id</param-name>
  		<param-value>nakja</param-value>
  	</init-param>
  </servlet>
  <servlet-mapping>
  	<servlet-name>MemberAuth</servlet-name>
  	<url-pattern>/13Servlet/MemberAuth.mvc</url-pattern>
  </servlet-mapping>
  <!-- 모델2 방식의 자료실형 게시판 구하기 -->
  <!-- 리스트(목록) 서블릿 매핑 -->
  <servlet>
  	<servlet-name>MVCBoardList</servlet-name><!-- 서블릿 이름 -->
  	<servlet-class>model2.mvcboard.ListController</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>MVCBoardList</servlet-name>
  	<url-pattern>/mvcboard/list.do</url-pattern><!-- 요청명 -->
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>MVCBoardWrite</servlet-name><!-- 서블릿 이름 -->
  	<servlet-class>model2.mvcboard.WriteController</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>MVCBoardWrite</servlet-name>
  	<url-pattern>/mvcboard/write.do</url-pattern><!-- 요청명 -->
  </servlet-mapping>
  <context-param>
  	<param-name>maxPostSize</param-name>
  	<param-value>1024000</param-value>
  </context-param>
  
  <servlet>
  	<display-name>MemberFrontController</display-name>
  	<servlet-name>MemberFrontController</servlet-name>
  	<servlet-class>com.member.action.MemberFrontController</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>MemberFrontController</servlet-name>
  	<url-pattern>*.me</url-pattern>
  </servlet-mapping>
  <servlet>
  	<display-name>BoardFrontController</display-name>
  	<servlet-name>BoardFrontController</servlet-name>
  	<servlet-class>com.board.action.BoardFrontController</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>BoardFrontController</servlet-name>
  	<url-pattern>*.bo</url-pattern>
  </servlet-mapping>
  
</web-app>




